#!/usr/bin/env python3
"""
Test script untuk integrasi dengan Sidinar Dashboard
"""
import requests
import time
import os
from pathlib import Path

# Configuration
BASE_URL = "http://localhost:8000"
TEST_DOCX = "test_document.docx"

def create_test_docx():
    """Create a simple test DOCX file"""
    try:
        from docx import Document
        
        doc = Document()
        doc.add_heading('Test Document', 0)
        doc.add_paragraph('This is a test document for PDF conversion.')
        doc.add_paragraph('Generated by PDF Converter integration test.')
        
        doc.save(TEST_DOCX)
        print(f"‚úÖ Created test DOCX: {TEST_DOCX}")
        return True
    except ImportError:
        print("‚ùå python-docx not installed. Creating dummy file...")
        # Create a minimal DOCX-like file (won't work for real conversion)
        with open(TEST_DOCX, 'wb') as f:
            f.write(b'PK\x03\x04' + b'\x00' * 100)  # Minimal ZIP header
        return False

def test_health_check():
    """Test health check endpoint"""
    print("\nüîç Testing health check...")
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check passed")
            print(f"   Service: {data.get('service')}")
            print(f"   Available engines: {data.get('available_engines', [])}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

def test_queue_status():
    """Test queue status endpoint (Sidinar compatible)"""
    print("\nüîç Testing queue status...")
    try:
        response = requests.get(f"{BASE_URL}/queue/status")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Queue status check passed")
            print(f"   Service status: {data.get('service_status')}")
            print(f"   Queue size: {data.get('queue_size', 0)}")
            print(f"   Message: {data.get('message')}")
            return True
        else:
            print(f"‚ùå Queue status failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Queue status error: {e}")
        return False

def test_convert_dua():
    """Test /convertDua endpoint (Sidinar compatible)"""
    print("\nüîç Testing /convertDua endpoint...")
    
    if not os.path.exists(TEST_DOCX):
        print(f"‚ùå Test file {TEST_DOCX} not found")
        return False
    
    try:
        # Prepare request data (same format as Sidinar Dashboard)
        files = {'file': open(TEST_DOCX, 'rb')}
        data = {
            'nomor_urut': 'TEST_001_' + str(int(time.time())),
            'target_url': 'http://test.example.com/callback'
        }
        
        print(f"   Sending conversion request...")
        response = requests.post(f"{BASE_URL}/convertDua", files=files, data=data)
        files['file'].close()
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Conversion request accepted")
            print(f"   Success: {result.get('success')}")
            print(f"   Nomor urut: {result.get('nomor_urut')}")
            print(f"   Conversion ID: {result.get('conversion_id')}")
            print(f"   Status: {result.get('status')}")
            
            return result.get('conversion_id')
        else:
            print(f"‚ùå Conversion request failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Conversion request error: {e}")
        return None

def test_conversion_status(conversion_id):
    """Test conversion status monitoring"""
    print(f"\nüîç Testing conversion status for {conversion_id}...")
    
    max_attempts = 30  # 30 seconds max wait
    attempt = 0
    
    while attempt < max_attempts:
        try:
            response = requests.get(f"{BASE_URL}/status/{conversion_id}")
            if response.status_code == 200:
                status = response.json()
                current_status = status.get('status')
                print(f"   Attempt {attempt + 1}: Status = {current_status}")
                
                if current_status == 'completed':
                    print(f"‚úÖ Conversion completed successfully")
                    print(f"   Engine used: {status.get('engine_used')}")
                    return True
                elif current_status == 'failed':
                    print(f"‚ùå Conversion failed")
                    print(f"   Error: {status.get('error')}")
                    return False
                else:
                    # Still processing, wait and retry
                    time.sleep(1)
                    attempt += 1
            else:
                print(f"‚ùå Status check failed: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Status check error: {e}")
            return False
    
    print(f"‚ùå Conversion timed out after {max_attempts} seconds")
    return False

def test_pdf_download(conversion_id):
    """Test PDF download"""
    print(f"\nüîç Testing PDF download for {conversion_id}...")
    
    try:
        # Test direct PDF access (Sidinar compatible)
        response = requests.get(f"{BASE_URL}/pdf/{conversion_id}")
        if response.status_code == 200:
            pdf_filename = f"test_output_{conversion_id}.pdf"
            with open(pdf_filename, 'wb') as f:
                f.write(response.content)
            
            file_size = os.path.getsize(pdf_filename)
            print(f"‚úÖ PDF downloaded successfully")
            print(f"   File: {pdf_filename}")
            print(f"   Size: {file_size} bytes")
            
            # Cleanup
            os.remove(pdf_filename)
            return True
        else:
            print(f"‚ùå PDF download failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå PDF download error: {e}")
        return False

def test_cleanup(conversion_id):
    """Test cleanup endpoint"""
    print(f"\nüîç Testing cleanup for {conversion_id}...")
    
    try:
        response = requests.delete(f"{BASE_URL}/cleanup/{conversion_id}")
        if response.status_code == 200:
            print(f"‚úÖ Cleanup completed successfully")
            return True
        else:
            print(f"‚ùå Cleanup failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Cleanup error: {e}")
        return False

def main():
    """Run all integration tests"""
    print("üöÄ Starting PDF Converter Integration Tests")
    print("=" * 50)
    
    # Create test file
    create_test_docx()
    
    # Run tests
    tests_passed = 0
    total_tests = 0
    
    # Test 1: Health check
    total_tests += 1
    if test_health_check():
        tests_passed += 1
    
    # Test 2: Queue status
    total_tests += 1
    if test_queue_status():
        tests_passed += 1
    
    # Test 3: Conversion request
    total_tests += 1
    conversion_id = test_convert_dua()
    if conversion_id:
        tests_passed += 1
        
        # Test 4: Status monitoring
        total_tests += 1
        if test_conversion_status(conversion_id):
            tests_passed += 1
            
            # Test 5: PDF download
            total_tests += 1
            if test_pdf_download(conversion_id):
                tests_passed += 1
            
            # Test 6: Cleanup
            total_tests += 1
            if test_cleanup(conversion_id):
                tests_passed += 1
    
    # Cleanup test file
    if os.path.exists(TEST_DOCX):
        os.remove(TEST_DOCX)
    
    # Results
    print("\n" + "=" * 50)
    print(f"üèÅ Integration Tests Completed")
    print(f"   Passed: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("‚úÖ All tests passed! Service is ready for Sidinar Dashboard integration.")
        return 0
    else:
        print("‚ùå Some tests failed. Please check the service configuration.")
        return 1

if __name__ == "__main__":
    exit(main())
